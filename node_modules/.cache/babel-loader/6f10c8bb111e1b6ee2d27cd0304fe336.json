{"ast":null,"code":"import { stopSubmit } from \"redux-form\";\nimport { authAPI, securityAPI } from \"../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => async dispach => {\n  let response = await authAPI.my();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispach(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => async dispach => {\n  let response = await authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispach(getAuthUserData());\n  } else {\n    let message = response.data.messages.lenght > 0 ? response.data.messages[0] : \"Some error\";\n    dispach(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => dispach => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispach(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport const getCaptchaURL = () => async dispach => {\n  const response = await securityAPI.getCaptchaURL();\n  const captchaUrl = response.data.url;\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/admin/Documents/MyPrograms/ReactProject/social-network-demo/src/redux/auth-reducer.js"],"names":["stopSubmit","authAPI","securityAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispach","response","my","data","resultCode","id","password","rememberMe","message","messages","lenght","_error","logout","then","getCaptchaURL","url"],"mappings":"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","sourcesContent":["import { stopSubmit } from \"redux-form\";\nimport { authAPI, securityAPI } from \"../api/api\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null\n}\n\nconst authReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state, \n                ...action.payload\n                \n            }\n        default:\n            return state;\n    }\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: SET_USER_DATA, \n    payload: {userId, email, login, isAuth} })\n\nexport const getAuthUserData = ()=> async (dispach)=>{\n  let response = await authAPI.my()\n  \n          if (response.data.resultCode === 0) {\n            let {id, email, login} = response.data.data;\n            dispach(setAuthUserData(id, email, login, true));\n          }\n      \n    }\n\n\nexport const login = (email, password, rememberMe)=> async (dispach)=>{\n       let response = await authAPI.login(email, password, rememberMe)\n       \n          if (response.data.resultCode === 0) {\n            dispach(getAuthUserData());\n          } else\n          {\n            let message = response.data.messages.lenght > 0 ? response.data.messages[0] : \"Some error\"\n            dispach(stopSubmit(\"login\", {_error: message}));\n          }\n   \n    }\n\n    export const logout = ()=> (dispach)=>{\n        authAPI.logout()\n        .then(response => {\n          if (response.data.resultCode === 0) {\n            dispach(setAuthUserData(null, null, null, false));\n          }\n        });\n    }\n\n    export const getCaptchaURL = ()=> async (dispach)=>{\n      const response = await securityAPI.getCaptchaURL();\n      const captchaUrl = response.data.url;\n\n    \n  }\n\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}