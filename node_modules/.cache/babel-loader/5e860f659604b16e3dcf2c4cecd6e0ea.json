{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/react-pr/src/components/Users/UsersContainer.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { follow, setCurrentPage, setTotalCount, setUsers, toggletIsFetching, unfollow } from \"../../redux/users-reducer\";\nimport * as axios from \"axios\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/Preloader/Preloader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UsersContainer extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.onPageChanged = pageNumber => {\n      this.props.setCurrentPage(pageNumber);\n      this.props.toggletIsFetching(true);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n        this.props.toggletIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggletIsFetching(true);\n    axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n      this.props.toggletIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 31\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        currentPage: this.props.currentPage,\n        onPageChanged: this.onPageChanged,\n        users: this.props.users,\n        unfollow: this.props.unfollow,\n        follow: this.props.follow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n}; // let mapDispachToProps = (dispatch) => {\n//     return {\n//         follow: (userId) => {\n//             dispatch(followAC(userId));\n//         },\n//         unfollow: (userId) => {\n//             dispatch(unfollowAC(userId));\n//         },\n//         setUsers:(users) => {\n//             dispatch(setUsersAC(users))\n//         },\n//         setCurrentPage: (pageNumber) => {\n//             dispatch(setCurrentPageAC(pageNumber))\n//         },\n//         setTotalCount: (totalCount) => { \n//             dispatch(setTotalCountAC(totalCount))\n//         },\n//         toggletIsFetching: (isFetching) => { \n//             dispatch(toggletIsFetchingAC(isFetching))\n//         }\n// }}\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalCount,\n  toggletIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["/Users/admin/Desktop/react-pr/src/components/Users/UsersContainer.jsx"],"names":["React","connect","follow","setCurrentPage","setTotalCount","setUsers","toggletIsFetching","unfollow","axios","Users","Preloader","UsersContainer","Component","onPageChanged","pageNumber","props","get","pageSize","then","response","data","items","componentDidMount","currentPage","totalCount","render","isFetching","totalUsersCount","users","mapStateToProps","state","usersPage"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { follow, setCurrentPage, setTotalCount, setUsers, toggletIsFetching, unfollow } from \"../../redux/users-reducer\";\nimport * as axios from \"axios\";\nimport Users from \"./Users\";\nimport Preloader from \"../common/Preloader/Preloader\";\n\nclass UsersContainer extends React.Component {\n    componentDidMount() {\n        this.props.toggletIsFetching(true);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(response => {\n            this.props.toggletIsFetching(false);    \n        this.props.setUsers(response.data.items);\n            this.props.setTotalCount(response.data.totalCount);\n        });\n    }\n    onPageChanged = (pageNumber) => {\n        this.props.setCurrentPage(pageNumber);\n        this.props.toggletIsFetching(true);\n        axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(response => {\n            this.props.toggletIsFetching(false);   \n        this.props.setUsers(response.data.items);\n        });\n    }\n    render() {\n    return <>\n    { this.props.isFetching ? <Preloader /> : null }\n    <Users totalUsersCount = {this.props.totalUsersCount}\n    pageSize = {this.props.pageSize}\n    currentPage = {this.props.currentPage}\n    onPageChanged = {this.onPageChanged}\n    users = {this.props.users}\n    unfollow = {this.props.unfollow}\n    follow = {this.props.follow}  />\n    </>\n}}\n\nlet mapStateToProps = (state) => { \n    return {\n        users: state.usersPage.users,\n        pageSize:state.usersPage.pageSize,\n        totalUsersCount:state.usersPage.totalUsersCount,\n        currentPage:state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\n\n// let mapDispachToProps = (dispatch) => {\n//     return {\n//         follow: (userId) => {\n//             dispatch(followAC(userId));\n//         },\n//         unfollow: (userId) => {\n//             dispatch(unfollowAC(userId));\n//         },\n//         setUsers:(users) => {\n//             dispatch(setUsersAC(users))\n//         },\n//         setCurrentPage: (pageNumber) => {\n//             dispatch(setCurrentPageAC(pageNumber))\n//         },\n//         setTotalCount: (totalCount) => { \n//             dispatch(setTotalCountAC(totalCount))\n//         },\n//         toggletIsFetching: (isFetching) => { \n//             dispatch(toggletIsFetchingAC(isFetching))\n//         }\n        \n        \n// }}\n\nexport default connect (mapStateToProps, {follow, unfollow, setUsers, setCurrentPage, setTotalCount, toggletIsFetching})\n(UsersContainer)"]},"metadata":{},"sourceType":"module"}