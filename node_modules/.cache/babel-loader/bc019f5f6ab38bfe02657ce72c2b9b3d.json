{"ast":null,"code":"import { stopSubmit } from \"redux-form\";\nimport { authAPI } from \"../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\n\nconst authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getAuthUserData = () => dispach => {\n  return authAPI.my().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispach(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispach => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispach(getAuthUserData());\n    } else {\n      let message = response.data.messages.lenght > 0 ? response.data.messages[0] : \"Some error\";\n      dispach(stopSubmit(\"login\", {\n        _error: message\n      }));\n    }\n  });\n};\nexport const logout = () => dispach => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispach(setAuthUserData(null, null, null, false));\n    }\n  });\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/admin/Desktop/react-pr/src/redux/auth-reducer.js"],"names":["stopSubmit","authAPI","SET_USER_DATA","initialState","userId","email","login","isAuth","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispach","my","then","response","data","resultCode","id","password","rememberMe","message","messages","lenght","_error","logout"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,MAAMC,aAAa,GAAG,eAAtB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE,IADO;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;;AAOA,MAAMC,WAAW,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAElD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,aAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEH,WAAGC,MAAM,CAACE;AAFP,OAAP;;AAKJ;AACI,aAAOH,KAAP;AARR;AAUH,CAZD;;AAcA,OAAO,MAAMI,eAAe,GAAG,CAACT,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,MAAmC;AAAEI,EAAAA,IAAI,EAAET,aAAR;AAC9DU,EAAAA,OAAO,EAAE;AAACR,IAAAA,MAAD;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB;AADqD,CAAnC,CAAxB;AAGP,OAAO,MAAMO,eAAe,GAAG,MAAKC,OAAD,IAAW;AAC5C,SAAOd,OAAO,CAACe,EAAR,GACAC,IADA,CACKC,QAAQ,IAAI;AAChB,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClC,UAAI;AAACC,QAAAA,EAAD;AAAKhB,QAAAA,KAAL;AAAYC,QAAAA;AAAZ,UAAqBY,QAAQ,CAACC,IAAT,CAAcA,IAAvC;AACAJ,MAAAA,OAAO,CAACF,eAAe,CAACQ,EAAD,EAAKhB,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAP;AACD;AACF,GANA,CAAP;AAOG,CARE;AAWP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAiCR,OAAD,IAAW;AACxDd,EAAAA,OAAO,CAACK,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,EACCN,IADD,CACMC,QAAQ,IAAI;AAChB,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClCL,MAAAA,OAAO,CAACD,eAAe,EAAhB,CAAP;AACD,KAFD,MAGA;AACE,UAAIU,OAAO,GAAGN,QAAQ,CAACC,IAAT,CAAcM,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACC,IAAT,CAAcM,QAAd,CAAuB,CAAvB,CAApC,GAAgE,YAA9E;AACAV,MAAAA,OAAO,CAACf,UAAU,CAAC,OAAD,EAAU;AAAC2B,QAAAA,MAAM,EAAEH;AAAT,OAAV,CAAX,CAAP;AACD;AACF,GATD;AAUH,CAXE;AAaH,OAAO,MAAMI,MAAM,GAAG,MAAMb,OAAD,IAAW;AAClCd,EAAAA,OAAO,CAAC2B,MAAR,GACCX,IADD,CACMC,QAAQ,IAAI;AAChB,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClCL,MAAAA,OAAO,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAP;AACD;AACF,GALD;AAMH,CAPM;AAUX,eAAeL,WAAf","sourcesContent":["import { stopSubmit } from \"redux-form\";\nimport { authAPI } from \"../api/api\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\nlet initialState = {\n    userId: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nconst authReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case SET_USER_DATA:\n            return {\n                ...state, \n                ...action.payload\n                \n            }\n        default:\n            return state;\n    }\n}\n\nexport const setAuthUserData = (userId, email, login, isAuth) => ({ type: SET_USER_DATA, \n    payload: {userId, email, login, isAuth} })\n\nexport const getAuthUserData = ()=>(dispach)=>{\n  return authAPI.my()\n        .then(response => {\n          if (response.data.resultCode === 0) {\n            let {id, email, login} = response.data.data;\n            dispach(setAuthUserData(id, email, login, true));\n          }\n        });\n    }\n\n\nexport const login = (email, password, rememberMe)=> (dispach)=>{\n        authAPI.login(email, password, rememberMe)\n        .then(response => {\n          if (response.data.resultCode === 0) {\n            dispach(getAuthUserData());\n          } else\n          {\n            let message = response.data.messages.lenght > 0 ? response.data.messages[0] : \"Some error\"\n            dispach(stopSubmit(\"login\", {_error: message}));\n          }\n        });\n    }\n\n    export const logout = ()=> (dispach)=>{\n        authAPI.logout()\n        .then(response => {\n          if (response.data.resultCode === 0) {\n            dispach(setAuthUserData(null, null, null, false));\n          }\n        });\n    }\n\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}