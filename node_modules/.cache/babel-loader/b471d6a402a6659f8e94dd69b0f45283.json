{"ast":null,"code":"import { userAPI } from \"../api/api\";\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\nlet initialState = {\n  posts: [{\n    id: 1,\n    message: 'Hi, how are you',\n    likeCount: 2\n  }, {\n    id: 2,\n    message: 'Its my first post!',\n    likeCount: 3\n  }],\n  newPostText: 'Napisz text',\n  profile: null,\n  status: ''\n};\n\nconst profileReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let newPost = {\n          id: 5,\n          message: state.newPostText,\n          likeCount: 0\n        };\n        return { ...state,\n          posts: [...state.posts, newPost],\n          newPostText: ''\n        };\n      }\n\n    case UPDATE_NEW_POST_TEXT:\n      {\n        return { ...state,\n          newPostText: action.newText\n        };\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    case SET_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addPostActionCreator = () => ({\n  type: ADD_POST\n});\nexport const updateNewPostActionCreator = text => ({\n  type: UPDATE_NEW_POST_TEXT,\n  newText: text\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const getUserProfile = userId => {\n  return dispach => {\n    userAPI.getProfile(userId).then(response => {\n      dispach(setUserProfile(response.data));\n    });\n  };\n};\nexport default profileReducer;","map":{"version":3,"sources":["/Users/admin/Desktop/react-pr/src/redux/profile-reducer.js"],"names":["userAPI","UPDATE_NEW_POST_TEXT","ADD_POST","SET_USER_PROFILE","SET_STATUS","initialState","posts","id","message","likeCount","newPostText","profile","status","profileReducer","state","action","type","newPost","newText","addPostActionCreator","updateNewPostActionCreator","text","setUserProfile","getUserProfile","userId","dispach","getProfile","then","response","data"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAEA,MAAMC,oBAAoB,GAAG,sBAA7B;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,UAAU,GAAG,YAAnB;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,CACH;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,OAAO,EAAE,iBAAlB;AAAqCC,IAAAA,SAAS,EAAE;AAAhD,GADG,EAEH;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,OAAO,EAAE,oBAAlB;AAAwCC,IAAAA,SAAS,EAAE;AAAnD,GAFG,CADQ;AAKfC,EAAAA,WAAW,EAAE,aALE;AAMfC,EAAAA,OAAO,EAAE,IANM;AAOfC,EAAAA,MAAM,EAAE;AAPO,CAAnB;;AAUA,MAAMC,cAAc,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBT,YAAyB;AAAA,MAAXU,MAAW;;AAErD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,QAAL;AAAe;AACX,YAAIe,OAAO,GAAG;AACVV,UAAAA,EAAE,EAAE,CADM;AAEVC,UAAAA,OAAO,EAAEM,KAAK,CAACJ,WAFL;AAGVD,UAAAA,SAAS,EAAE;AAHD,SAAd;AAKA,eAAO,EACH,GAAGK,KADA;AAEHR,UAAAA,KAAK,EAAE,CAAC,GAAGQ,KAAK,CAACR,KAAV,EAAiBW,OAAjB,CAFJ;AAGHP,UAAAA,WAAW,EAAE;AAHV,SAAP;AAMH;;AACD,SAAKT,oBAAL;AAA2B;AACvB,eAAO,EACH,GAAGa,KADA;AAEHJ,UAAAA,WAAW,EAAEK,MAAM,CAACG;AAFjB,SAAP;AAIH;;AACD,SAAKf,gBAAL;AAAuB;AACnB,eAAO,EACH,GAAGW,KADA;AAEHH,UAAAA,OAAO,EAAEI,MAAM,CAACJ;AAFb,SAAP;AAIH;;AACD,SAAKP,UAAL;AAAiB;AACb,eAAO,EACH,GAAGU,KADA;AAEHF,UAAAA,MAAM,EAAEG,MAAM,CAACH;AAFZ,SAAP;AAIH;;AACG;AACI,aAAOE,KAAP;AAjCZ;AAmCH,CArCD;;AAuCA,OAAO,MAAMK,oBAAoB,GAAG,OAAO;AAAEH,EAAAA,IAAI,EAAEd;AAAR,CAAP,CAA7B;AACP,OAAO,MAAMkB,0BAA0B,GAAIC,IAAD,KAAW;AAAEL,EAAAA,IAAI,EAAEf,oBAAR;AAA8BiB,EAAAA,OAAO,EAAEG;AAAvC,CAAX,CAAnC;AACP,OAAO,MAAMC,cAAc,GAAIX,OAAD,KAAc;AAAEK,EAAAA,IAAI,EAAEb,gBAAR;AAA0BQ,EAAAA;AAA1B,CAAd,CAAvB;AAEP,OAAO,MAAMY,cAAc,GAAIC,MAAD,IAAY;AACtC,SAAQC,OAAD,IAAW;AACdzB,IAAAA,OAAO,CAAC0B,UAAR,CAAmBF,MAAnB,EACCG,IADD,CACMC,QAAQ,IAAI;AACjBH,MAAAA,OAAO,CAACH,cAAc,CAACM,QAAQ,CAACC,IAAV,CAAf,CAAP;AACC,KAHF;AAIH,GALD;AAOH,CARM;AAYP,eAAehB,cAAf","sourcesContent":["import { userAPI } from \"../api/api\";\n\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst ADD_POST = 'ADD-POST';\nconst SET_USER_PROFILE = 'SET_USER_PROFILE';\nconst SET_STATUS = 'SET_STATUS';\n\nlet initialState = {\n    posts: [\n        { id: 1, message: 'Hi, how are you', likeCount: 2 },\n        { id: 2, message: 'Its my first post!', likeCount: 3 },\n    ],\n    newPostText: 'Napisz text',\n    profile: null,\n    status: ''\n}\n\nconst profileReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case ADD_POST: {\n            let newPost = {\n                id: 5,\n                message: state.newPostText,\n                likeCount: 0\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n                newPostText: ''\n            };\n\n        }\n        case UPDATE_NEW_POST_TEXT: {\n            return {\n                ...state,\n                newPostText: action.newText\n            }; \n        }\n        case SET_USER_PROFILE: {\n            return {\n                ...state,\n                profile: action.profile\n            }; \n        }\n        case SET_STATUS: {\n            return {\n                ...state,\n                status: action.status\n            }; \n        }\n            default:\n                return state;\n    }\n}\n\nexport const addPostActionCreator = () => ({ type: ADD_POST })\nexport const updateNewPostActionCreator = (text) => ({ type: UPDATE_NEW_POST_TEXT, newText: text })\nexport const setUserProfile = (profile) => ({ type: SET_USER_PROFILE, profile })\n\nexport const getUserProfile = (userId) => {\n    return (dispach)=>{\n        userAPI.getProfile(userId)\n        .then(response => { \n         dispach(setUserProfile(response.data));\n         });\n    }\n    \n}\n\n\n\nexport default profileReducer;"]},"metadata":{},"sourceType":"module"}